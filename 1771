class Solution {
public:
    int longestPalindrome(string word1, string word2) {
        int m=word1.size(), n=word2.size();
        vector<vector<int>> dp(m, vector<int>(n,0));
         vector<vector<int>> dp1=longp(word1);
        vector<vector<int>> dp2=longp(word2);

        for(int i=m-1; i>=0;i--) {
            for(int j=0; j<n;j++){
                if(word1[i]==word2[j]) {
                   if(i+1<m && j-1>=0) {
                        dp[i][j]=2+max(max(dp[i+1][j-1],dp1[i+1][m-1]), dp2[0][j-1]);
                    } else {
                                              dp[i][j]=2;

                        if(i+1<m) {
                            dp[i][j]=dp1[i+1][m-1]+2;
                        } 
                        if(j-1>=0) {
                            dp[i][j]=dp2[0][j-1]+2;
                        }
                   }
                } else {
                    dp[i][j]=0;
                    if(i+1<m && j-1>=0) {
                    dp[i][j]=max(dp[i+1][j], dp[i][j-1]);
                    } else {
                        if(i+1<m) {
                            dp[i][j]=dp[i+1][j];
                        } 
                        if(j-1>=0) {
                            dp[i][j]=dp[i][j-1];
                        }
                    }
                }
                
            }
        }
        return dp[0][n-1];
    }
    
    vector<vector<int>> longp(string x) {
          int n=x.size();
        vector<vector<int>> dp(n, vector<int>(n,0));
        for(int k=0; k<n; k++) {
            for(int i=0; i+k<n; i++) {
                if(x[i]==x[i+k]) {
                    if(k>=2) {
                        dp[i][i+k]=2+dp[i+1][i+k-1];
                    }else {
                        dp[i][i+k]=k+1;
                    }
                } else {
                dp[i][i+k]=max(dp[i+1][i+k], dp[i][i+k-1]);
                    }
            }
        }
        return dp;
    }
};
