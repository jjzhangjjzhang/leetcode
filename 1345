class Solution {
public:
    int minJumps(vector<int>& arr) {
        set<int> visited;
        unordered_map<int, unordered_set<int>> valueIndexes;
        for(int i=0; i<arr.size(); i++) {
           valueIndexes[arr[i]].insert(i); 
        }
        int level=0;
        visited.insert(arr.size()-1);
        if(arr.size()-1==0) return level;
        vector<int> current;
        current.push_back(arr.size()-1);
        while(true) {
            level++;
            vector<int> next;
            for(auto x: current){
                if(x-1>=0 && visited.find(x-1)==visited.end()) {
                    if(x-1==0) return level;
                    next.push_back(x-1);
                    visited.insert(x-1);
                }
                if(x+1<arr.size() && visited.find(x+1)==visited.end()) {
                    next.push_back(x+1);
                    visited.insert(x+1);
                }
                for(auto y: valueIndexes[arr[x]]) {
                    if(y==0) return level;
                    if(visited.find(y)==visited.end()) {
                    next.push_back(y);
                    visited.insert(y);
                    }
                }
            }
            current = next;
        }
        return -1;
    }
};
