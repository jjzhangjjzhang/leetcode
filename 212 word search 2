class Solution {
public:
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        for(auto w: words) {
            if(isIn(board, w)) {
                res.push_back(w);
            }
        }
        return res;
    }
    
    bool isIn(vector<vector<char>>& board, string word) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<bool>> visited(n, vector<bool>(m, false));
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {   
                if(dfs(board, visited, i, j, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    bool dfs(vector<vector<char>>& board, vector<vector<bool>>& visited, int i, int j, string word, int k) {
        if(k==word.size()) return true;
   int n=board.size();
        int m=board[0].size();
        if(i>=n || i<0 || j>=m || j<0) return false;
       if(visited[i][j]==false && board[i][j]==word[k]) {
           visited[i][j]=true;
           if(dfs(board, visited, i+1, j, word, k+1)) return true;
            if(dfs(board, visited, i-1, j, word, k+1)) return true;
            if(dfs(board, visited, i, j+1, word, k+1)) return true;
           if(dfs(board, visited, i, j-1, word, k+1)) return true;
             visited[i][j]=false;
           
       }
        return false;
    }
};
