class RandomizedCollection {
public:
     vector<int> vt; //value vector
  unordered_map<int, unordered_set<int>> mp; //value to pos
    /** Initialize your data structure here. */
    RandomizedCollection() {
        
    }
    
    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */
    bool insert(int val) {
        vt.push_back(val);
        
    mp[val].insert(vt.size() - 1);
    return mp[val].size() == 1; 
    }
    
    /** Removes a value from the collection. Returns true if the collection contained the specified element. */
    bool remove(int val) {
      if(mp.find(val)==mp.end()) return false;
        
        auto index_to_remove=*(mp[val].begin());
        cout<<index_to_remove<<endl;
        int last=vt.size()-1;
        vt[index_to_remove]=vt[last];

        mp[vt[last]].erase(last);
        mp[val].erase(index_to_remove);
        if(mp[vt[last]].size()==0) mp.erase(vt[last]);

        if(mp[val].size()==0) mp.erase(val);
                mp[vt[last]].insert(index_to_remove);

        vt.pop_back();
        return true;
      
    }
    
    /** Get a random element from the collection. */
    int getRandom() {
        cout<<vt.size();
        return vt[rand()%vt.size()];

    }
};
 
