class Solution {
public:
    int longestValidParentheses(string s) {
        int res=0;
        int cur=0;
        int i=0;
        stack<int> st;
        while(i<s.size()) {
           if(s[i]=='(') {
              st.push(-1);
           } else {
               if(!st.empty()) {
                 int tmp=st.top();
                 st.pop();
                 if(tmp==-1) {
                     int cur=2;
                     if(!st.empty()) {
                        int tmp1=st.top();
                        if(tmp1>0) {
                          cur=cur+tmp1;
                          st.pop();
                        } 
                       } 
                          st.push(cur);
                          res=cur>res?cur:res;
                 } else {
                     if(tmp==-2) {
                         st.push(-2);
                     } else {
                         if( !st.empty() && st.top()==-1) {
                             st.pop();
                             int cur=tmp+2;
                             if( !st.empty() && st.top()>0) {
                                  cur=cur+st.top();
                                 st.pop();
                             }
                             st.push(cur);
                              res=cur>res?cur:res;
                         }
                     }
                }
           }
          
        }
      i++;
    }
       return res;
    }
};
