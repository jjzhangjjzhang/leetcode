struct TrieNode {
 bool isLeaf;
 TrieNode *next[26];
};

class Trie {
    private:
    TrieNode* root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root=new TrieNode{ false};
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* tmp=root;
        for(int i=0; i<word.size(); i++) {
            if(tmp->next[word[i]-'a']==NULL) {
                tmp->next[word[i]-'a']=new TrieNode{false};
            }
            tmp=tmp->next[word[i]-'a'];
        }
        tmp->isLeaf=true;

    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
          TrieNode* tmp=root;
        for(int i=0; i<word.size(); i++) {
            if(tmp->next[word[i]-'a']==NULL) {
                return false;
            }
            tmp=tmp->next[word[i]-'a'];
        }
        return tmp->isLeaf;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode* tmp=root;
        for(int i=0; i<prefix.size(); i++) {
            if(tmp->next[prefix[i]-'a']==NULL) {
                return false;
            }
            tmp=tmp->next[prefix[i]-'a'];
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
